name: Create Release on Main Push

on:
  push:
    branches:
      - 

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Determine the current version
        id: determine_version
        run: |
          # Get the list of tags
          ALL_TAGS=$(git tag -l)
          
          # Check if there are any tags
          if [ -z "$ALL_TAGS" ]; then
            # If no tags, start from version 0.1.0
            NEW_VERSION="v0.1.0"
          else
            # Find the latest version
            LATEST_TAG=$(echo "$ALL_TAGS" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
          
            echo "Latest tag: $LATEST_TAG"
          
            # Extract major, minor, and patch versions
            IFS='.' read -r -a VERSION_PARTS <<< "$(echo "$LATEST_TAG" | sed 's/^v//')"
            MAJOR_VERSION="${VERSION_PARTS[0]}"
            MINOR_VERSION="${VERSION_PARTS[1]}"
            PATCH_VERSION="${VERSION_PARTS[2]}"
          
            echo "Current version parts: $MAJOR_VERSION, $MINOR_VERSION, $PATCH_VERSION"
          
            # Increment minor version
            ((MINOR_VERSION++))
            NEW_VERSION="v$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION"
          
            echo "New version: $NEW_VERSION"
          fi
          
          echo "::set-output name=NEW_VERSION::$NEW_VERSION"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./*
          token: ${{ secrets.TOKEN }}
          tag_name: ${{ steps.determine_version.outputs.NEW_VERSION }}

      - name: Get the URL of the created release
        run: echo "Release URL - ${{ steps.create_release.outputs.upload_url }}"
